"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _error = require("./error");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

module.exports = function (io, options) {
  return new SocketIORequest(io, options);
};

var SocketIORequest = function () {
  function SocketIORequest(io) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, SocketIORequest);

    this.io = io;
    this.options = Object.assign({
      event: "socket.io-request",
      timeout: 90000
    }, options);
  }

  _createClass(SocketIORequest, [{
    key: "request",
    value: function request(method, data) {
      var _this = this;

      if (typeof method !== "string") throw new Error('argument "method" is missing');

      return new Promise(function (resolve, reject) {
        _this.io.emit(_this.options.event, { method: method, data: data }, function (res) {
          clearTimeout(timeout);
          _this.io.removeListener("disconnect", onDisconnect);
          if (res.error) return reject((0, _error.convertObjectToError)(res.error));
          resolve(res.data);
        });

        var onDisconnect = function onDisconnect() {
          clearTimeout(timeout);
          reject(new _error.SocketIOError("disconnect"));
        };

        var timeout = setTimeout(function () {
          _this.io.removeListener("disconnect", onDisconnect);
          reject(new _error.TimeoutError("exceeded " + _this.options.timeout + " (msec)"));
        }, _this.options.timeout);

        _this.io.once("disconnect", onDisconnect);
      });
    }
  }, {
    key: "response",
    value: function response(method, callback) {
      if (typeof method !== "string") throw new Error('argument "method" is missing');
      if (typeof callback !== "function") throw new Error('"callback" must be a function');
      this.io.on(this.options.event, function (req, ack) {
        if (req.method !== method) return;
        var res = function res(data) {
          ack({ data: data });
        };
        res.error = function (err) {
          ack({ error: (0, _error.convertErrorToObject)(err) });
        };
        callback(req.data, res);
      });
    }
  }]);

  return SocketIORequest;
}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5lczYiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImlvIiwib3B0aW9ucyIsIlNvY2tldElPUmVxdWVzdCIsIk9iamVjdCIsImFzc2lnbiIsImV2ZW50IiwidGltZW91dCIsIm1ldGhvZCIsImRhdGEiLCJFcnJvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZW1pdCIsInJlcyIsImNsZWFyVGltZW91dCIsInJlbW92ZUxpc3RlbmVyIiwib25EaXNjb25uZWN0IiwiZXJyb3IiLCJzZXRUaW1lb3V0Iiwib25jZSIsImNhbGxiYWNrIiwib24iLCJyZXEiLCJhY2siLCJlcnIiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztBQUVBQSxPQUFPQyxPQUFQLEdBQWlCLFVBQVNDLEVBQVQsRUFBYUMsT0FBYixFQUFxQjtBQUNwQyxTQUFPLElBQUlDLGVBQUosQ0FBb0JGLEVBQXBCLEVBQXdCQyxPQUF4QixDQUFQO0FBQ0QsQ0FGRDs7SUFJTUMsZTtBQUVKLDJCQUFZRixFQUFaLEVBQTZCO0FBQUEsUUFBYkMsT0FBYSx5REFBSCxFQUFHOztBQUFBOztBQUMzQixTQUFLRCxFQUFMLEdBQVVBLEVBQVY7QUFDQSxTQUFLQyxPQUFMLEdBQWVFLE9BQU9DLE1BQVAsQ0FBYztBQUMzQkMsYUFBTyxtQkFEb0I7QUFFM0JDLGVBQVM7QUFGa0IsS0FBZCxFQUdaTCxPQUhZLENBQWY7QUFJRDs7Ozs0QkFFT00sTSxFQUFRQyxJLEVBQUs7QUFBQTs7QUFDbkIsVUFBRyxPQUFPRCxNQUFQLEtBQWtCLFFBQXJCLEVBQStCLE1BQU0sSUFBSUUsS0FBSixDQUFVLDhCQUFWLENBQU47O0FBRS9CLGFBQU8sSUFBSUMsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN0QyxjQUFLWixFQUFMLENBQVFhLElBQVIsQ0FBYSxNQUFLWixPQUFMLENBQWFJLEtBQTFCLEVBQWlDLEVBQUNFLGNBQUQsRUFBU0MsVUFBVCxFQUFqQyxFQUFpRCxVQUFDTSxHQUFELEVBQVM7QUFDeERDLHVCQUFhVCxPQUFiO0FBQ0EsZ0JBQUtOLEVBQUwsQ0FBUWdCLGNBQVIsQ0FBdUIsWUFBdkIsRUFBcUNDLFlBQXJDO0FBQ0EsY0FBR0gsSUFBSUksS0FBUCxFQUFjLE9BQU9OLE9BQU8saUNBQXFCRSxJQUFJSSxLQUF6QixDQUFQLENBQVA7QUFDZFAsa0JBQVFHLElBQUlOLElBQVo7QUFDRCxTQUxEOztBQU9BLFlBQU1TLGVBQWUsU0FBZkEsWUFBZSxHQUFNO0FBQ3pCRix1QkFBYVQsT0FBYjtBQUNBTSxpQkFBTyx5QkFBa0IsWUFBbEIsQ0FBUDtBQUNELFNBSEQ7O0FBS0EsWUFBTU4sVUFBVWEsV0FBVyxZQUFNO0FBQy9CLGdCQUFLbkIsRUFBTCxDQUFRZ0IsY0FBUixDQUF1QixZQUF2QixFQUFxQ0MsWUFBckM7QUFDQUwsaUJBQU8sc0NBQTZCLE1BQUtYLE9BQUwsQ0FBYUssT0FBMUMsYUFBUDtBQUNELFNBSGUsRUFHYixNQUFLTCxPQUFMLENBQWFLLE9BSEEsQ0FBaEI7O0FBS0EsY0FBS04sRUFBTCxDQUFRb0IsSUFBUixDQUFhLFlBQWIsRUFBMkJILFlBQTNCO0FBQ0QsT0FuQk0sQ0FBUDtBQW9CRDs7OzZCQUVRVixNLEVBQVFjLFEsRUFBUztBQUN4QixVQUFHLE9BQU9kLE1BQVAsS0FBa0IsUUFBckIsRUFBK0IsTUFBTSxJQUFJRSxLQUFKLENBQVUsOEJBQVYsQ0FBTjtBQUMvQixVQUFHLE9BQU9ZLFFBQVAsS0FBb0IsVUFBdkIsRUFBbUMsTUFBTSxJQUFJWixLQUFKLENBQVUsK0JBQVYsQ0FBTjtBQUNuQyxXQUFLVCxFQUFMLENBQVFzQixFQUFSLENBQVcsS0FBS3JCLE9BQUwsQ0FBYUksS0FBeEIsRUFBK0IsVUFBQ2tCLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQzNDLFlBQUdELElBQUloQixNQUFKLEtBQWVBLE1BQWxCLEVBQTBCO0FBQzFCLFlBQU1PLE1BQU0sU0FBTkEsR0FBTSxDQUFTTixJQUFULEVBQWM7QUFDeEJnQixjQUFJLEVBQUNoQixVQUFELEVBQUo7QUFDRCxTQUZEO0FBR0FNLFlBQUlJLEtBQUosR0FBWSxVQUFTTyxHQUFULEVBQWE7QUFDdkJELGNBQUksRUFBQ04sT0FBTyxpQ0FBcUJPLEdBQXJCLENBQVIsRUFBSjtBQUNELFNBRkQ7QUFHQUosaUJBQVNFLElBQUlmLElBQWIsRUFBbUJNLEdBQW5CO0FBQ0QsT0FURDtBQVVEIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjb252ZXJ0RXJyb3JUb09iamVjdCwgY29udmVydE9iamVjdFRvRXJyb3IsIFRpbWVvdXRFcnJvciwgU29ja2V0SU9FcnJvcn0gZnJvbSAnLi9lcnJvcic7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaW8sIG9wdGlvbnMpe1xuICByZXR1cm4gbmV3IFNvY2tldElPUmVxdWVzdChpbywgb3B0aW9ucyk7XG59O1xuXG5jbGFzcyBTb2NrZXRJT1JlcXVlc3R7XG5cbiAgY29uc3RydWN0b3IoaW8sIG9wdGlvbnMgPSB7fSl7XG4gICAgdGhpcy5pbyA9IGlvO1xuICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgZXZlbnQ6IFwic29ja2V0LmlvLXJlcXVlc3RcIixcbiAgICAgIHRpbWVvdXQ6IDkwMDAwXG4gICAgfSwgb3B0aW9ucyk7XG4gIH1cblxuICByZXF1ZXN0KG1ldGhvZCwgZGF0YSl7XG4gICAgaWYodHlwZW9mIG1ldGhvZCAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IEVycm9yKCdhcmd1bWVudCBcIm1ldGhvZFwiIGlzIG1pc3NpbmcnKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmlvLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50LCB7bWV0aG9kLCBkYXRhfSwgKHJlcykgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIHRoaXMuaW8ucmVtb3ZlTGlzdGVuZXIoXCJkaXNjb25uZWN0XCIsIG9uRGlzY29ubmVjdCk7XG4gICAgICAgIGlmKHJlcy5lcnJvcikgcmV0dXJuIHJlamVjdChjb252ZXJ0T2JqZWN0VG9FcnJvcihyZXMuZXJyb3IpKTtcbiAgICAgICAgcmVzb2x2ZShyZXMuZGF0YSk7XG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgb25EaXNjb25uZWN0ID0gKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIHJlamVjdChuZXcgU29ja2V0SU9FcnJvcihcImRpc2Nvbm5lY3RcIikpO1xuICAgICAgfTtcblxuICAgICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmlvLnJlbW92ZUxpc3RlbmVyKFwiZGlzY29ubmVjdFwiLCBvbkRpc2Nvbm5lY3QpO1xuICAgICAgICByZWplY3QobmV3IFRpbWVvdXRFcnJvcihgZXhjZWVkZWQgJHt0aGlzLm9wdGlvbnMudGltZW91dH0gKG1zZWMpYCkpO1xuICAgICAgfSwgdGhpcy5vcHRpb25zLnRpbWVvdXQpO1xuXG4gICAgICB0aGlzLmlvLm9uY2UoXCJkaXNjb25uZWN0XCIsIG9uRGlzY29ubmVjdCk7XG4gICAgfSk7XG4gIH1cblxuICByZXNwb25zZShtZXRob2QsIGNhbGxiYWNrKXtcbiAgICBpZih0eXBlb2YgbWV0aG9kICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgRXJyb3IoJ2FyZ3VtZW50IFwibWV0aG9kXCIgaXMgbWlzc2luZycpO1xuICAgIGlmKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoJ1wiY2FsbGJhY2tcIiBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICB0aGlzLmlvLm9uKHRoaXMub3B0aW9ucy5ldmVudCwgKHJlcSwgYWNrKSA9PiB7XG4gICAgICBpZihyZXEubWV0aG9kICE9PSBtZXRob2QpIHJldHVybjtcbiAgICAgIGNvbnN0IHJlcyA9IGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICBhY2soe2RhdGF9KTtcbiAgICAgIH07XG4gICAgICByZXMuZXJyb3IgPSBmdW5jdGlvbihlcnIpe1xuICAgICAgICBhY2soe2Vycm9yOiBjb252ZXJ0RXJyb3JUb09iamVjdChlcnIpfSk7XG4gICAgICB9O1xuICAgICAgY2FsbGJhY2socmVxLmRhdGEsIHJlcyk7XG4gICAgfSk7XG4gIH1cblxufVxuIl19